{"version":3,"sources":["angular-color-this.js"],"names":[],"mappings":"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","file":"angular-color-this-compiled.js","sourcesContent":["angular\n  .module('ngColorThis', [])\n  .factory('Color', () => {\n    /**\n     * Convert a string into RGB values\n     * @param {String|Number|Boolean} string - An input string\n     * @param {Number} saltParam - Random variation of color\n     * @returns {Object} rgbObject - A color object\n     */\n    function convert(string, saltParam) {\n      let {r, g, b, rOffset, gOffset, bOffset } = 0, output = '', salt = saltParam ? parseInt(saltParam) : -5;\n      string = string.toString();\n      for (var i = string.length - 1; i >= 0; i--) {\n        const charAt = string.charCodeAt(i).toString().split('');\n        for (var x = charAt.length - 1; x >= 0; x--) {\n          let y = charAt[x] - salt;\n          if (y < 4)\n            y = parseInt(y) + 4;\n          output += Math.pow(y * Math.round(y / 2), 8);\n        }\n      }\n      if (output.length % 3 === 0)\n        output = output.split('').reverse().join('');\n      rOffset = Math.floor(output.length / 3);\n      gOffset = rOffset * 2;\n      bOffset = output.length - 3;\n      r = toVal(output[rOffset], output[rOffset + 1], output[rOffset + 2]);\n      g = toVal(output[gOffset], output[gOffset + 1], output[gOffset + 2]);\n      b = toVal(output[bOffset], output[bOffset + 1], output[bOffset + 2]);\n      return {\n        red: r,\n        green: g,\n        blue: b\n      };\n    }\n\n    function toVal(a, b, c) {\n      let together = parseInt(a + b + c);\n      while (together > 255)\n        together = Math.round(together / 5);\n      return together;\n    }\n\n    function rgbToCSS(red, green, blue) {\n      return `rgb(${ red }, ${ green }, ${ blue })`;\n    }\n\n    return {\n      convert: convert,\n      toVal: toVal,\n      rgbToCSS: rgbToCSS\n    };\n  })\n  .directive('colorThis', Color => {\n    return {\n      restrict: 'A',\n      scope: {\n        color: '=color',\n        salt: '=colorSalt'\n      },\n      link(scope, element, attrs, fn) {\n        scope.$watch('color', (newValue, oldValue) => {\n          if (newValue) {\n            const rgb = Color.convert(newValue);\n            const css = Color.rgbToCSS(rgb.red, rgb.green, rgb.blue, 50);\n            element.css(attrs.colorThis, css);\n          }\n        }, false);\n      }\n    };\n  });\n"]}